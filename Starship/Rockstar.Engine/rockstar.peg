@namespace Rockstar.Engine
@classname Parser
@using System.Globalization
@using System.Text.RegularExpressions
@using Rockstar.Engine.Statements
@using Rockstar.Engine.Expressions
@using Rockstar.Engine.Values
@trace true

@ignorecase true

program <Program>
	= EOS* head:block tail:program
		{ new Program(head).Concat(tail) }
	/ EOS* EOF
		{ new Program() }

block <Block>
	= _? head:statement EOS tail:block
		{ new Block(head).Concat(tail) }
	/ _? stmt:statement
		{ new Block(stmt) }

statement = output

output <Statement>
	= say _ expr:expression
		{ new Output(expr) }

expression <Expression>
	= string
	/ number

number <Number>
    = digits:('-'? [0-9]+ ("." [0-9]+)?) { new Number(double.Parse(digits)) }
	/ digits:('-'? "." [0-9]+) { new Number(double.Parse(digits)) }

string <Strïng> = "" '"' s:("" [^"]*) '"' { new Strïng(s) }

say = 'shout' / 'whisper' / 'say' / 'scream'

_ = "" (whitespace / comment)+
whitespace = [ \t]
comment	=
	'#' [^\n]* '\n'
	/ '(' [^)]* ')'
	/ '{' [^\}]* '}'
	/ '[' [^\]]* ']'

EOB = EOS+
EOS = _? [?!;]
	/ EOL
EOL = _? '\r'? '\n'
EOF = _? !.
	/ unexpected:("" [^ \t\r\n]+) 
		#error{ $"Unexpected '{Regex.Escape(unexpected)}' at line {state.Line}, col {state.Column - unexpected.Length}" }