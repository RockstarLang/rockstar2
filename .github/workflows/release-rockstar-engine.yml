name: release-rockstar-engine
on:
  workflow_run:
    workflows: ['build-wasm-and-linux-binaries']
    types: [completed]
    branches: ['main']
  # push:
  #   branches: ["main"]
  #   paths:
  #     - 'Starship/**'
  #     - '.github/workflows/**'
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "engine"
  cancel-in-progress: true
jobs:
  fetch-stuff-from-cache-1:
    runs-on: ubuntu-latest
    steps:
      - name: restore dylan-test-alpha-cache- from cache (no restore-keys)
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: dylan-test-alpha
          key: dylan-test-alpha-cache-
      - name: see what we got
        run: ls -lR
  fetch-stuff-from-cache-3:
    runs-on: ubuntu-latest
    steps:
      - name: restore files from from cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: banana/dylan-test-alpha
          key: this-key-does-not-match-anything
          restore-keys: |
            dylan-test-alpha-cache-
      - name: see what we got
        run: ls -lR
  fetch-stuff-from-cache-4:
    runs-on: ubuntu-latest
    steps:
      - name: restore files from from cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: dylan-test-alpha
          key: this-key-does-not-match-anything
          restore-keys: |
            dylan-test-alpha-cache
      - name: see what we got
        run: ls -lR
  restore-cached-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4
      - name: restore macOS ARM64 binary from cache
        uses: actions/cache/restore@v4
        id: restore-cached-macos-arm64-binary
        with:
          enableCrossOsArchive: true
          path: macos-arm64
          key: rockstar-macos-arm64-binary
          restore-keys: |
            rockstar-macos-arm64-binary-
      - name: restore macOS x64 binary from cache
        uses: actions/cache/restore@v4
        id: restore-cached-macos-x64-binary
        with:
          enableCrossOsArchive: true
          path: macos-x64
          key: rockstar-macos-x64-binary
          restore-keys: |
            rockstar-macos-x64-binary-
      - name: restore Linux binary from cache
        uses: actions/cache/restore@v4
        id: restore-cached-linux-binary
        with:
          enableCrossOsArchive: true
          path: linux
          key: rockstar-linux-x64-binary
          restore-keys: |
            rockstar-linux-x64-binary-
      - name: restore Windows binary from cache
        uses: actions/cache/restore@v4
        id: restore-cached-windows-x64-binary
        with:
          enableCrossOsArchive: true
          path: windows
          key: rockstar-windows-x64-binary
          restore-keys: |
            rockstar-windows-x64-binary-
      - name: restore WASM binary from cache
        uses: actions/cache/restore@v4
        id: restore-cached-wasm-binary
        with:
          enableCrossOsArchive: true
          path: wasm
          key: rockstar-wasm-binary
          restore-keys: |
            rockstar-wasm-binary-
      - name: create download assets
        run: |
          ls -lR
      # - name: extract version from binary
      #   id: version
      #   run: echo "::set-output name=version::$(./binaries/linux/rockstar --version)"

      # - name: create download assets
      #   run: |
      #     ls -lR
      #     zip rockstar-${{ steps.version.outputs.version }}-windows-x64.zip binaries/windows/*
      #     tar -czf rockstar-${{ steps.version.outputs.version }}-macos-arm64.tar.gz binaries/macos-arm64/*
      #     tar -czf rockstar-${{ steps.version.outputs.version }}-macos-x64.tar.gz binaries/macos-x64/*
      #     tar -czf rockstar-${{ steps.version.outputs.version }}-linux-x64.tar.gz binaries/linux/*

      # - name: create release
      #   uses: actions/create-release@v1
      #   id: create_release
      #   with:
      #     draft: true
      #     prerelease: true
      #     release_name: rockstar-${{ steps.version.outputs.version }}
      #     tag_name: ${{ steps.version.outputs.version }}

      # - name: upload windows artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./rockstar-${{ steps.version.outputs.version }}-windows-x64.zip
      #     asset_name: rockstar-${{ steps.version.outputs.version }}-windows-x64.zip
      #     asset_content_type: application/zip
      # - name: upload macos-x64 artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./rockstar-${{ steps.version.outputs.version }}-macos-x64.tar.gz
      #     asset_name: rockstar-${{ steps.version.outputs.version }}-macos-x64.tar.gz
      #     asset_content_type: application/gzip
      # - name: upload linux-x64 artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./rockstar-${{ steps.version.outputs.version }}-linux-x64.tar.gz
      #     asset_name: rockstar-${{ steps.version.outputs.version }}-linux-x64.tar.gz
      #     asset_content_type: application/gzip
      # - name: upload macos-arm64 artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./rockstar-${{ steps.version.outputs.version }}-macos-arm64.tar.gz
      #     asset_name: rockstar-${{ steps.version.outputs.version }}-macos-arm64.tar.gz
      #     asset_content_type: application/gzip